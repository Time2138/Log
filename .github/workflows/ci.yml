name: Build and Publish to Release, GitHub Packages and NuGet.org

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Project
      run: dotnet build --configuration Release

    - name: Archive DLL
      run: |
        mkdir -p release
        cp ./Timersky.Log/bin/Release/net8.0/*.dll ./release/
        zip -r ./release.zip ./release

    - name: Upload DLL as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-dll
        path: release.zip
    
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Tag
      run: |
        TAG_NAME=$(date +%Y%m%d%H%M%S)
        git tag $TAG_NAME
        git push origin $TAG_NAME

    - name: Check if Release Exists
      id: check_release
      run: |
        if curl --silent --fail -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}; then
          echo "release_exists=true" >> $GITHUB_ENV
        else
          echo "release_exists=false" >> $GITHUB_ENV
        fi

    - name: Create Release
      if: env.release_exists == 'false'
      id: create_release
      uses: actions/create-release@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Update Release
      if: env.release_exists == 'true'
      run: |
        RELEASE_ID=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq -r '.id')

        curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -d '{"name": "Release '"${{ github.ref_name }}"'", "draft": false, "prerelease": false}' \
        https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID

    - name: Upload DLL to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip

    - name: test
      run: |
        ls ./Timersky.Log/bin/Release/
    
    - name: Publish to NuGet.org
      run: |
        dotnet nuget push ./Timersky.Log/bin/Release/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}

    - name: Publish to GitHub Packages
      run: |
        dotnet nuget push ./Timersky.Log/bin/Release/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
